* SQL
** Create new user
   #+BEGIN_SRC sql
   CREATE USER 'new_user'@'host' IDENTIFIED BY 'password';
   #+END_SRC

   Then you'll need to grant privileges to this new user.
   #+BEGIN_SRC sql
   GRANT { ALL PRIVILEGES | CREATE | DROP | DELETE | INSERT | SELECT | UPDATE | OPTION } TO 'username'@'host';
   GRANT type_of_permission ON database_name.table_name TO 'username'@'host';
   #+END_SRC
   Parameters:
   - ALL PRIVILEGES: every single privilege in this list.
   - CREATE: New user can create new tables or databases.
   - DROP: New user can delete tables or databases.
   - DELETE: New user can delete rows from tables.
   - INSERT: New user can insert rows into tables.
   - SELECT: New user can execute the SELECT command to read through databases.
   - UPDATE: New user can update table rows.
   - USAGE: New user doesn't have any special privileges.
   - OPTION: New user can grant or remove other users' privileges.

   After that, execute this to apply the changes.
   #+BEGIN_SRC sql
   FLUSH PRIVILEGES;
   #+END_SRC
** Create database
   To create a database with dashes (-) in the name, surround it with
   backticks (`):
   #+BEGIN_SRC sql
   CREATE DATABASE db_name;
   #+END_SRC
** Show user's privileges
   You can use '%' instead of 'host' to show privileges for all hosts.
   #+BEGIN_SRC sql
   SHOW GRANTS FOR 'username'@'host';
   #+END_SRC
** Get database list in the server
   #+BEGIN_SRC sql
   SHOW DATABASES;
   #+END_SRC
** Get table list in database
   #+BEGIN_SRC sql
   SHOW TABLES;
   #+END_SRC
** Set operations
*** Union
    #+BEGIN_SRC sql results :raw
    SELECT columns FROM table_1 [WHERE conditions]
    UNION
    SELECT columns FROM table_2 [WHERE conditions];
    #+END_SRC
*** Intersection
    #+BEGIN_SRC sql
    SELECT DISTINCT columns FROM table_1 [WHERE conditions]
    INTERSECT
    SELECT columns FROM table_2 [WHERE conditions];
    #+END_SRC

    For MySQL:
    #+BEGIN_SRC sql
    SELECT DISTINCT columns FROM table_1 [WHERE conditions]
    INNER JOIN table_2 [WHERE conditions];
    #+END_SRC
*** Difference
    For MySQL:
    #+BEGIN_SRC sql
    SELECT DISTINCT columns FROM table_1 [WHERE conditions]
    LEFT JOIN table_2 ON table_1.column = table_2.column
    WHERE table_2.column IS NULL;
    #+END_SRC

    If you add NOT in the end, you get the common fields:
    #+BEGIN_SRC sql
    SELECT DISTINCT columns FROM table_1 [WHERE conditions]
    LEFT JOIN table_2 ON table_1.column = table_2.column
    WHERE table_2.column IS NOT NULL;
    #+END_SRC

    Other DB systems:
    #+BEGIN_SRC sql
    SELECT columns FROM table_1 [WHERE conditions]
    MINUS
    SELECT columns FROM table_2 [WHERE conditions];
    #+END_SRC
** Rename tables
   With ALTER you can rename only one table.
   RENAME TABLE allows multiple renames.
   You must have ALTER and DROP privileges for the original table, and
   CREATE and INSERT privileges for the new table.
   #+BEGIN_SRC sql
   ALTER TABLE old_table RENAME new_table;
   RENAME TABLE old_table1 TO new_table1,
                old_table2 TO new_table2,
                old_table3 TO new_table3;
   #+END_SRC
* Servers
** MySQL
*** Import data from file
    #+BEGIN_SRC sh
    mysql -u <username> -p <database_name> < file.sql
    #+END_SRC
*** Dump data to file
    #+BEGIN_SRC sh
    mysqldump -u <username> <database_name> [table_name1 table_name2 ...] > file.sql
    #+END_SRC
